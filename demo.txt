Linux Commands, Vi editor, Shell Scripting, Overview of OS, Processes, Scheduling & Synchronization, Memory management, File Systems, Case Study with Linux System Programming: Process, Signals, Semaphores & Mutex, Inter â€“ Process Communication, POSIX Threads


os defination
--------------
Operating System --
	It is a system software . 
	It acts as an interface between ---
	a) end user and system ( using GUI, CLI )
	b) application software & system ( system calls)
It manages different system activities --
	like ---
	1. process management 
	2. memory management
	3. device management(IO management )
	4. security

instruction register
---------------------
IR = instruction register -- stores the current instruction
	at a time only one instruction is kept here

Program counter
----------------
PC = Program counter --- stores the address of the next instruction.( offset  address )

ALU
----
Executor of CPU --- ALU -- arithmetic and logic unit 

	ALU -- circuit created using VLSI 
	arithmetic =  +,-,*,/,%
	logic = && ,||, !
	relational  = < ,> !=,<=,>=,==

types of instructions
-----------------------
Two types of instructions ?????
	
	1. CPU instructions --- ALU executes them 
	2. IO instructions --- IO processor/DMA controller 

types of kernel
---------------
KERNEL = OS 

two types of kernels ---
	1. monolithic kernel -- not modular
		single process kernel 
		if there is a problem in any function
		then the kernel will crash
			
Examples of operating systems that use a monolithic kernel are - Linux, BSDs (FreeBSD, OpenBSD, NetBSD), Solaris, OS-9, AIX, HP-UX, DOS, Microsoft Windows (95,98,Me), OpenVMS, XTS-400 etc.

	2. microkernel ---- modular 
		many small processes make one kernel 
		if any part fails the OS is still working

	Examples of operating systems that use a microkernel are - QNX, Integrity, PikeOS, Symbian, L4Linux, Singularity, K42, Mac OS X, HURD, Minix, and Coyotos

OS Type
--------
Different purposes we have different OSs
	GPOS = General Purpose OS - windows, ubuntu
	RTOS = real time OS
	Network OS 
	Server OS 

Interrupt Management
---------------------
	Interrupt --- signal
		|
		
	first the interrupt is understood ---- interrupt number
for every interrupt there is handler code 
	ISR = Interrupt Service Routine 
	IH = Interrupt Handler

	Data Structure --- IVT = Interrupt Vector Table
Interrupt Table( mapping interrupt_no with Address of ISR)

	interrupt_no |  function pointer to ISR


when interrupt occurs the kernel finds the ISR from IVT and 
	executes it

2 types of interrupts ---
	Maskable --- these can be ignored
		 RST6.5, RST7.5, and RST5.5 

	NonMaskable  --- these can never be ignored
				TRAP



Process Management 
--------------------

  Process --- program in execution
	process is a logical / intangible entity


program NOT in execution --- A  FILE 
program in execution   --- A process

program NOT in execution --- present on HDD
program in execution   ---  RAM 

program NOT in execution ---- DOES not have a lifecycle
program in execution   ---has a life cycle


One program file on hard disk 
	MAY have 
multiple instances of processes in RAM 

	Life cycle  has many PHASES/STATES 

	Create State ---- Process is created
	1. process ADDRESS SPACE is loaded in RAM by loader of 		kernel

Every process has ITS EXCLUSIVE (belonging only to that process)
ADDRESS SPACE ( it is made up of C,D,S,H)


	2. PCB variable is created per process by Kernel
		Process Control Block
	
	struct PCB
	{
		int pid;
		char * curr_state;
		int * location;
		int priority;
		Context * context;
	}

At process creation

	struct PCB * pcb = (struct PCB) malloc(sizeof(struct PCB));
	pcb->pid = get_next_unique_pid();
	pcb->curr_state =...
	...
	...
	
Ready state ---------
	the pcb variable is stored in a Queue data structure
	this queue is called Ready Queue maintained by kernel 
the process is ready to run BUT the resource (CPU ) is not free
So the process waits for the CPU

Execute/Running state  --------------
	the pcb leaves the ready Q 
	process starts using CPU
	process leaves the CPU
	a) if IO instruction occurs
	b) interrupt occurs
	c) if process completes



IO WAIT STATE ---- the process waits here for IO to complete

TERMINATE STATE --------   process is removed from RAM
		free(pcb)

SHELL COMMAND:-
******************************************************
ps --- process status 
	shell is a process 
	every command you run is a process

ps  --- shows processes in current terminal only
ps -e  ---------shows process in entire system

processes may run either in foreground or in background

  fg --- the process will block the prompt till it is running
  bg --- the process will run but it will release the prompt


how to create a process in bg
	./infy &

how to see its state 
	jobs

how to get a bg process in fg
	fg job-number

**********************************************************

QUEUE
--------
All processes, upon entering into the system, are stored in the Job   Queue.
 Processes in the Ready state are placed in the Ready Queue.
 Processes waiting for a device to become available are placed in Device Queues. There are unique device queues available for each I/O device.
A new process is initially put in the Ready queue.

SCHEDULER
-------------
Long Term Scheduler

Long term scheduler runs less frequently. Long Term Schedulers decide which program must get into the job queue. From the job queue, the Job Processor, selects processes and loads them into the memory for execution. Primary aim of the Job Scheduler is to maintain a good degree of Multiprogramming. An optimal degree of Multiprogramming means the average rate of process creation is equal to the average departure rate of processes from the execution memory.

Short Term Scheduler

This is also known as CPU Scheduler and runs very frequently. The primary aim of this scheduler is to enhance CPU performance and increase process execution rate.

Medium Term Scheduler

This scheduler removes the processes from memory (and from active contention for the CPU), and thus reduces the degree of multiprogramming. At some later time, the process can be reintroduced into memory and its execution van be continued where it left off. This scheme is called swapping. The process is swapped out, and is later swapped in, by the medium term scheduler.

Swapping may be necessary to improve the process mix, or because a change in memory requirements has overcommitted available memory, requiring memory to be freed up
